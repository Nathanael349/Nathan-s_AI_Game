"""
Example playthrough to demonstrate the game's features
Run this to see how the game works without playing manually
"""

from config import FACTIONS
from game_state import GameState
from openai_client import KingdomAI

def demonstrate_self_digestion():
    """
    This script demonstrates how the LLM digests its own outputs
    Perfect for showing your professor the technical implementation
    """
    
    print("=" * 70)
    print("THE EVOLVING KINGDOM - SELF-DIGESTION DEMONSTRATION")
    print("=" * 70)
    print()
    print("This demonstrates how the LLM reads and transforms its own outputs:")
    print()
    
    # Initialize
    gs = GameState("demo_state.json")
    gs.initialize_new_game("Demo Player")
    ai = KingdomAI()
    
    print("STEP 1: LLM Generates Initial Response")
    print("-" * 70)
    
    decision1 = "Raise taxes to fund a grand festival"
    faction_data = gs.get_faction_data("merchants")
    context = gs.get_game_context()
    
    response1 = ai.generate_faction_response(faction_data, decision1, context)
    print(f"Decision: {decision1}")
    print(f"Merchant Response: \"{response1}\"")
    print()
    
    # Analyze sentiment
    sentiment1 = ai.analyze_sentiment(response1)
    print(f"Sentiment Analysis: {sentiment1['sentiment']} (intensity: {sentiment1['intensity']:.2f})")
    print(f"Reasoning: {sentiment1['reasoning']}")
    print()
    
    # Save to state
    gs.add_faction_memory("merchants", decision1, response1, sentiment1)
    print("âœ… Response saved to game_state.json")
    print()
    
    print("STEP 2: LLM Reads Its Previous Output and Generates New Response")
    print("-" * 70)
    
    decision2 = "Lower taxes to win the people's favor"
    gs.state["current_turn"] = 2
    
    # Now faction_data includes the previous response in memory
    faction_data = gs.get_faction_data("merchants")
    print(f"Memory now contains: {len(faction_data['memory'])} previous interaction(s)")
    print()
    
    response2 = ai.generate_faction_response(faction_data, decision2, context)
    print(f"Decision: {decision2}")
    print(f"Merchant Response: \"{response2}\"")
    print()
    print("ðŸ‘† Notice how this response may reference the previous taxation!")
    print()
    
    sentiment2 = ai.analyze_sentiment(response2)
    gs.add_faction_memory("merchants", decision2, response2, sentiment2)
    print("âœ… New response saved to game_state.json")
    print()
    
    print("STEP 3: LLM Summarizes Its Own Previous Outputs")
    print("-" * 70)
    
    turns_data = [
        {"turn": 1, "decision": decision1, "merchant_response": response1},
        {"turn": 2, "decision": decision2, "merchant_response": response2}
    ]
    
    chronicle = ai.create_chronicle(turns_data, (1, 2))
    print(f"Chronicle: \"{chronicle}\"")
    print()
    print("ðŸ‘† This is a summary of the LLM's own previous outputs!")
    print()
    
    gs.add_chronicle((1, 2), chronicle)
    print("âœ… Chronicle saved to game_state.json")
    print()
    
    print("STEP 4: LLM Transforms Personality Based on Accumulated Outputs")
    print("-" * 70)
    
    faction_data = gs.get_faction_data("merchants")
    recent_memory = faction_data["memory"]
    
    print(f"Analyzing {len(recent_memory)} previous interactions...")
    print()
    
    evolution = ai.evolve_personality(faction_data, recent_memory)
    print(f"Original Personality: {faction_data['base_personality']}")
    print(f"New Personality: {evolution['new_personality']}")
    print(f"Key Change: {evolution['key_change']}")
    print()
    print("ðŸ‘† The personality evolved based on the LLM's own generated responses!")
    print()
    
    gs.update_faction_personality("merchants", evolution['new_personality'], evolution['key_change'])
    print("âœ… Updated personality saved to game_state.json")
    print()
    
    print("STEP 5: View the Complete Self-Digestion Chain")
    print("-" * 70)
    print()
    print("The game_state.json now contains:")
    print("  1. Original merchant responses (generated by LLM)")
    print("  2. Sentiment analysis (LLM analyzing its own text)")
    print("  3. Chronicle summary (LLM summarizing its outputs)")
    print("  4. Evolved personality (LLM transforming based on its outputs)")
    print()
    print("Each LLM call reads this JSON and builds upon previous outputs!")
    print()
    
    print("=" * 70)
    print("DEMONSTRATION COMPLETE")
    print("=" * 70)
    print()
    print("To see the actual game state, check: demo_state.json")
    print("To play the full game: python main.py")
    print()

if __name__ == "__main__":
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    if not os.getenv("OPENAI_API_KEY"):
        print("ERROR: OPENAI_API_KEY not found in .env file")
        print("Please create a .env file and add your API key")
    else:
        demonstrate_self_digestion()
